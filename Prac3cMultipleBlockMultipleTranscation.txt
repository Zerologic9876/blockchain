import hashlib
import datetime

class Block:
    def __init__(self, index, transactions, previous_hash):
        self.index = index
        self.timestamp = datetime.datetime.now()
        self.transactions = transactions
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()
        
    def calculate_hash(self):
        block_data = str(self.index) + str(self.timestamp) + str(self.transactions) + str(self.previous_hash)
        return hashlib.sha256(block_data.encode()).hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
        
    def create_genesis_block(self):
        return Block(0, ["Genesis Transaction"], "0")
    
    def add_block(self, transactions):
        index = len(self.chain)
        previous_hash = self.chain[-1].hash
        new_block = Block(index, transactions, previous_hash)
        self.chain.append(new_block)
    
    def print_chain(self):
        for block in self.chain:
            print(f"Block {block.index}:")
            print(f"Timestamp: {block.timestamp}")
            print(f"Transactions: {block.transactions}")
            print(f"Previous Hash: {block.previous_hash}")
            print(f"Hash: {block.hash}\n")

blockchain = Blockchain()
number_of_blocks = int(input("Enter the number of blocks: "))
for i in range(number_of_blocks):
    transactions = input(f"Enter transactions for Block {i + 1} (comma-separated): ").split(", ")
    blockchain.add_block(transactions)
blockchain.print_chain()
